
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `top.ys' --

1. Executing ILANG frontend.
Input filename: top.il

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \pin_rst_0
Used module:     \pin_clk100_0
Used module:     \pin_led_0
Used module:     \cd_sync
Used module:         \reset_sync

2.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \pin_rst_0
Used module:     \pin_clk100_0
Used module:     \pin_led_0
Used module:     \cd_sync
Used module:         \reset_sync
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $group_1 in module top.
Marked 1 switch rules as full_case in process $group_2 in module cd_sync.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\top.$group_1'.
  Set init value: \timer = 26'00000000000000000000000000
Found init rule in `\top.$group_0'.
  Set init value: \pin_led_0_led_0__o = 8'00000000
Found init rule in `\cd_sync.$group_2'.
  Set init value: \timer = 11'00000000000
Found init rule in `\cd_sync.$group_1'.
  Set init value: \reset_sync_ready = 1'0
Found init rule in `\reset_sync.$group_1'.
  Set init value: \stage1 = 1'1
Found init rule in `\reset_sync.$group_0'.
  Set init value: \stage0 = 1'1

2.3.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \async_ff_rst in `\reset_sync.$group_1'.
Found async reset \async_ff_rst in `\reset_sync.$group_0'.

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$group_1'.
     1/1: \timer$next
Creating decoders for process `\top.$group_0'.
     1/1: \pin_led_0_led_0__o$next
Creating decoders for process `\pin_rst_0.$group_0'.
     1/1: \rst_0__i
Creating decoders for process `\cd_sync.$group_3'.
     1/1: \clk
Creating decoders for process `\cd_sync.$group_2'.
     1/1: \timer$next
Creating decoders for process `\cd_sync.$group_1'.
     1/1: \reset_sync_ready$next
Creating decoders for process `\cd_sync.$group_0'.
     1/1: \por_clk
Creating decoders for process `\reset_sync.$group_4'.
     1/1: \rst
Creating decoders for process `\reset_sync.$group_3'.
     1/1: \async_ff_clk
Creating decoders for process `\reset_sync.$group_2'.
     1/1: \async_ff_rst
Creating decoders for process `\reset_sync.$group_1'.
     1/1: \stage1$next
Creating decoders for process `\reset_sync.$group_0'.
     1/1: \stage0$next

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\timer' using process `\top.$group_1'.
  created $dff cell `$procdff$15' with positive edge clock.
Creating register for signal `\top.\pin_led_0_led_0__o' using process `\top.$group_0'.
  created $dff cell `$procdff$16' with positive edge clock.
Creating register for signal `\cd_sync.\timer' using process `\cd_sync.$group_2'.
  created $dff cell `$procdff$17' with positive edge clock.
Creating register for signal `\cd_sync.\reset_sync_ready' using process `\cd_sync.$group_1'.
  created $dff cell `$procdff$18' with positive edge clock.
Creating register for signal `\reset_sync.\stage1' using process `\reset_sync.$group_1'.
  created $adff cell `$procdff$19' with positive edge clock and positive level reset.
Creating register for signal `\reset_sync.\stage0' using process `\reset_sync.$group_0'.
  created $adff cell `$procdff$20' with positive edge clock and positive level reset.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\top.$group_1'.
Removing empty process `top.$group_1'.
Found and cleaned up 2 empty switches in `\top.$group_0'.
Removing empty process `top.$group_0'.
Removing empty process `pin_rst_0.$group_0'.
Removing empty process `cd_sync.$group_3'.
Found and cleaned up 1 empty switch in `\cd_sync.$group_2'.
Removing empty process `cd_sync.$group_2'.
Found and cleaned up 1 empty switch in `\cd_sync.$group_1'.
Removing empty process `cd_sync.$group_1'.
Removing empty process `cd_sync.$group_0'.
Removing empty process `reset_sync.$group_4'.
Removing empty process `reset_sync.$group_3'.
Removing empty process `reset_sync.$group_2'.
Removing empty process `reset_sync.$group_1'.
Removing empty process `reset_sync.$group_0'.
Cleaned up 6 empty switches.

2.4. Executing FLATTEN pass (flatten design).
Using template pin_clk100_0 for cells of type pin_clk100_0.
Using template pin_rst_0 for cells of type pin_rst_0.
Using template cd_sync for cells of type cd_sync.
Using template pin_led_0 for cells of type pin_led_0.
Using template reset_sync for cells of type reset_sync.
<suppressed ~5 debug messages>
No more expansions possible.
Deleting now unused module pin_rst_0.
Deleting now unused module pin_clk100_0.
Deleting now unused module pin_led_0.
Deleting now unused module cd_sync.
Deleting now unused module reset_sync.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.10.9. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 27) from port Y of cell top.$9 ($add).
Removed top 1 bits (of 12) from port Y of cell top.$techmap\cd_sync.$7 ($add).
Removed top 1 bits (of 27) from wire top.$7.
Removed top 1 bits (of 12) from wire top.$techmap\cd_sync.$5.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~36 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $9 ($add).
  creating $macc model for $techmap\cd_sync.$7 ($add).
  creating $alu model for $macc $techmap\cd_sync.$7.
  creating $alu model for $macc $9.
  creating $alu cell for $9: $auto$alumacc.cc:474:replace_alu$23
  creating $alu cell for $techmap\cd_sync.$7: $auto$alumacc.cc:474:replace_alu$26
  created 2 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=26\Y_WIDTH=26 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~58 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~136 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 43 unused cells and 38 unused wires.
<suppressed ~44 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$23.slice[0].carry: CO=\timer [0]
Optimized away SB_CARRY cell top.$auto$alumacc.cc:474:replace_alu$26.slice[0].carry: CO=\cd_sync.timer [0]
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$23.slice[1].adder back to logic.
Mapping SB_LUT4 cell top.$auto$alumacc.cc:474:replace_alu$26.slice[1].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~26 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.31.18. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$222 to $_DFFE_PP_ for \timer$next [1] -> \timer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$247 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [0] -> \pin_led_0_led_0__o [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$248 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [1] -> \pin_led_0_led_0__o [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$249 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [2] -> \pin_led_0_led_0__o [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$250 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [3] -> \pin_led_0_led_0__o [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$251 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [4] -> \pin_led_0_led_0__o [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$252 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [5] -> \pin_led_0_led_0__o [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$253 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [6] -> \pin_led_0_led_0__o [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$254 to $_DFFE_PP_ for \pin_led_0_led_0__o$next [7] -> \pin_led_0_led_0__o [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$258 to $_DFFE_PP_ for \cd_sync.reset_sync_ready$next -> \cd_sync.reset_sync_ready.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$259 to $_DFFE_PP_ for \cd_sync.timer$next [0] -> \cd_sync.timer [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$260 to $_DFFE_PP_ for \cd_sync.timer$next [1] -> \cd_sync.timer [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$261 to $_DFFE_PP_ for \cd_sync.timer$next [2] -> \cd_sync.timer [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$262 to $_DFFE_PP_ for \cd_sync.timer$next [3] -> \cd_sync.timer [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$263 to $_DFFE_PP_ for \cd_sync.timer$next [4] -> \cd_sync.timer [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$264 to $_DFFE_PP_ for \cd_sync.timer$next [5] -> \cd_sync.timer [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$265 to $_DFFE_PP_ for \cd_sync.timer$next [6] -> \cd_sync.timer [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$266 to $_DFFE_PP_ for \cd_sync.timer$next [7] -> \cd_sync.timer [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$267 to $_DFFE_PP_ for \cd_sync.timer$next [8] -> \cd_sync.timer [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$268 to $_DFFE_PP_ for \cd_sync.timer$next [9] -> \cd_sync.timer [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$269 to $_DFFE_PP_ for \cd_sync.timer$next [10] -> \cd_sync.timer [10].

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_PP1_ for cells of type $_DFF_PP1_.
No more expansions possible.
<suppressed ~48 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~44 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in top.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$269 (SB_DFFE): \cd_sync.timer [10] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$314 (SB_DFFS): \cd_sync.reset_sync.stage1 = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$221 (SB_DFF): \timer [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$222 (SB_DFFE): \timer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$223 (SB_DFF): \timer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$224 (SB_DFF): \timer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$225 (SB_DFF): \timer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$226 (SB_DFF): \timer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$227 (SB_DFF): \timer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$228 (SB_DFF): \timer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$230 (SB_DFF): \timer [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$231 (SB_DFF): \timer [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$232 (SB_DFF): \timer [11] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$233 (SB_DFF): \timer [12] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$234 (SB_DFF): \timer [13] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$235 (SB_DFF): \timer [14] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$236 (SB_DFF): \timer [15] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$237 (SB_DFF): \timer [16] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$238 (SB_DFF): \timer [17] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$239 (SB_DFF): \timer [18] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$240 (SB_DFF): \timer [19] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$241 (SB_DFF): \timer [20] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$242 (SB_DFF): \timer [21] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$243 (SB_DFF): \timer [22] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$244 (SB_DFF): \timer [23] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$245 (SB_DFF): \timer [24] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$246 (SB_DFF): \timer [25] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$247 (SB_DFFE): \pin_led_0_led_0__o [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$248 (SB_DFFE): \pin_led_0_led_0__o [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$249 (SB_DFFE): \pin_led_0_led_0__o [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$250 (SB_DFFE): \pin_led_0_led_0__o [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$251 (SB_DFFE): \pin_led_0_led_0__o [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$252 (SB_DFFE): \pin_led_0_led_0__o [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$253 (SB_DFFE): \pin_led_0_led_0__o [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$266 (SB_DFFE): \cd_sync.timer [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$262 (SB_DFFE): \cd_sync.timer [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$258 (SB_DFFE): \cd_sync.reset_sync_ready = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$260 (SB_DFFE): \cd_sync.timer [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$229 (SB_DFF): \timer [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$261 (SB_DFFE): \cd_sync.timer [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$263 (SB_DFFE): \cd_sync.timer [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$264 (SB_DFFE): \cd_sync.timer [5] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$254 (SB_DFFE): \pin_led_0_led_0__o [7] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$265 (SB_DFFE): \cd_sync.timer [6] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$267 (SB_DFFE): \cd_sync.timer [8] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$268 (SB_DFFE): \cd_sync.timer [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$259 (SB_DFFE): \cd_sync.timer [0] = 0
FF init value for cell $auto$simplemap.cc:496:simplemap_adff$313 (SB_DFFS): \cd_sync.reset_sync.stage0 = 1

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in top.
  Merging $auto$simplemap.cc:277:simplemap_mux$176 (A=$procmux$2_Y [0], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$221 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$177 (A=$procmux$2_Y [1], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$222 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$178 (A=$procmux$2_Y [2], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$223 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$179 (A=$procmux$2_Y [3], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$224 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$180 (A=$procmux$2_Y [4], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$225 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$181 (A=$procmux$2_Y [5], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$226 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$182 (A=$procmux$2_Y [6], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$227 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$183 (A=$procmux$2_Y [7], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$228 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$185 (A=$procmux$2_Y [9], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$230 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$186 (A=$procmux$2_Y [10], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$231 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$187 (A=$procmux$2_Y [11], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$232 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$188 (A=$procmux$2_Y [12], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$233 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$189 (A=$procmux$2_Y [13], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$234 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$190 (A=$procmux$2_Y [14], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$235 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$191 (A=$procmux$2_Y [15], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$236 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$192 (A=$procmux$2_Y [16], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$237 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$193 (A=$procmux$2_Y [17], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$238 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$194 (A=$procmux$2_Y [18], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$239 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$195 (A=$procmux$2_Y [19], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$240 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$196 (A=$procmux$2_Y [20], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$241 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$197 (A=$procmux$2_Y [21], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$242 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$198 (A=$procmux$2_Y [22], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$243 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$199 (A=$procmux$2_Y [23], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$244 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$200 (A=$procmux$2_Y [24], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$245 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$201 (A=$procmux$2_Y [25], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$246 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$213 (A=$3 [0], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$247 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$214 (A=$3 [1], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$248 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$215 (A=$3 [2], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$249 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$216 (A=$3 [3], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$250 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$217 (A=$3 [4], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$251 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$218 (A=$3 [5], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$252 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$219 (A=$3 [6], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$253 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$184 (A=$procmux$2_Y [8], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$229 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$220 (A=$3 [7], B=1'0, S=\cd_sync.reset_sync.stage1) into $auto$simplemap.cc:420:simplemap_dff$254 (SB_DFFE).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~96 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~48 debug messages>
Removed a total of 16 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 35 unused cells and 228 unused wires.
<suppressed ~40 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 101 gates and 175 wires to a netlist network with 73 inputs and 42 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      42.
ABC: Participating nodes from both networks       =      85.
ABC: Participating nodes from the first network   =      42. (  77.78 % of nodes)
ABC: Participating nodes from the second network  =      43. (  79.63 % of nodes)
ABC: Node pairs (any polarity)                    =      42. (  77.78 % of names can be moved)
ABC: Node pairs (same polarity)                   =      42. (  77.78 % of names can be moved)
ABC: Total runtime =     0.03 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:      106
ABC RESULTS:        internal signals:       60
ABC RESULTS:           input signals:       73
ABC RESULTS:          output signals:       42
Removing temp directory.
Removed 0 unused cells and 109 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
No more expansions possible.
<suppressed ~162 debug messages>
Removed 0 unused cells and 104 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \top

2.43.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

2.44. Printing statistics.

=== top ===

   Number of wires:                 76
   Number of wire bits:            216
   Number of public wires:          29
   Number of public wire bits:     102
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                178
     SB_CARRY                       33
     SB_DFFE                        12
     SB_DFFESR                       9
     SB_DFFR                         2
     SB_DFFSR                       25
     SB_GB_IO                        1
     SB_IO                           9
     SB_LUT4                        87

2.45. Executing CHECK pass (checking for obvious problems).
checking module top..
found and reported 0 problems.

3. Executing JSON backend.

End of script. Logfile hash: c14d7cd3c2
CPU: user 0.21s system 0.00s, MEM: 49.65 MB total, 44.13 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 32% 9x read_verilog (0 sec), 12% 17x opt_clean (0 sec), ...
